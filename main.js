/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DailyNewsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/@google/generative-ai/dist/index.mjs
var HarmCategory;
(function(HarmCategory2) {
  HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
  HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
  HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
  HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
  HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(HarmCategory || (HarmCategory = {}));
var HarmBlockThreshold;
(function(HarmBlockThreshold2) {
  HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
  HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
  HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
})(HarmBlockThreshold || (HarmBlockThreshold = {}));
var HarmProbability;
(function(HarmProbability2) {
  HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
  HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
  HarmProbability2["LOW"] = "LOW";
  HarmProbability2["MEDIUM"] = "MEDIUM";
  HarmProbability2["HIGH"] = "HIGH";
})(HarmProbability || (HarmProbability = {}));
var BlockReason;
(function(BlockReason2) {
  BlockReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
  BlockReason2["SAFETY"] = "SAFETY";
  BlockReason2["OTHER"] = "OTHER";
})(BlockReason || (BlockReason = {}));
var FinishReason;
(function(FinishReason2) {
  FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
  FinishReason2["STOP"] = "STOP";
  FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
  FinishReason2["SAFETY"] = "SAFETY";
  FinishReason2["RECITATION"] = "RECITATION";
  FinishReason2["OTHER"] = "OTHER";
})(FinishReason || (FinishReason = {}));
var TaskType;
(function(TaskType2) {
  TaskType2["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
  TaskType2["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
  TaskType2["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
  TaskType2["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
  TaskType2["CLASSIFICATION"] = "CLASSIFICATION";
  TaskType2["CLUSTERING"] = "CLUSTERING";
})(TaskType || (TaskType = {}));
var GoogleGenerativeAIError = class extends Error {
  constructor(message) {
    super(`[GoogleGenerativeAI Error]: ${message}`);
  }
};
var GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
};
var BASE_URL = "https://generativelanguage.googleapis.com";
var API_VERSION = "v1";
var PACKAGE_VERSION = "0.1.3";
var PACKAGE_LOG_HEADER = "genai-js";
var Task;
(function(Task2) {
  Task2["GENERATE_CONTENT"] = "generateContent";
  Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
  Task2["COUNT_TOKENS"] = "countTokens";
  Task2["EMBED_CONTENT"] = "embedContent";
  Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
})(Task || (Task = {}));
var RequestUrl = class {
  constructor(model, task, apiKey, stream) {
    this.model = model;
    this.task = task;
    this.apiKey = apiKey;
    this.stream = stream;
  }
  toString() {
    let url = `${BASE_URL}/${API_VERSION}/models/${this.model}:${this.task}`;
    if (this.stream) {
      url += "?alt=sse";
    }
    return url;
  }
};
function getClientHeaders() {
  return `${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`;
}
async function makeRequest(url, body) {
  let response;
  try {
    response = await fetch(url.toString(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-client": getClientHeaders(),
        "x-goog-api-key": url.apiKey
      },
      body
    });
    if (!response.ok) {
      let message = "";
      try {
        const json = await response.json();
        message = json.error.message;
        if (json.error.details) {
          message += ` ${JSON.stringify(json.error.details)}`;
        }
      } catch (e) {
      }
      throw new Error(`[${response.status} ${response.statusText}] ${message}`);
    }
  } catch (e) {
    const err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);
    err.stack = e.stack;
    throw err;
  }
  return response;
}
function addHelpers(response) {
  response.text = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getText(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return "";
  };
  return response;
}
function getText(response) {
  var _a, _b, _c, _d;
  if ((_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {
    return response.candidates[0].content.parts[0].text;
  } else {
    return "";
  }
}
var badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];
function hadBadFinishReason(candidate) {
  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
}
function formatBlockErrorMessage(response) {
  var _a, _b, _c;
  let message = "";
  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
    message += "Response was blocked";
    if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {
      message += ` due to ${response.promptFeedback.blockReason}`;
    }
    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
      message += `: ${response.promptFeedback.blockReasonMessage}`;
    }
  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
    const firstCandidate = response.candidates[0];
    if (hadBadFinishReason(firstCandidate)) {
      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
      if (firstCandidate.finishMessage) {
        message += `: ${firstCandidate.finishMessage}`;
      }
    }
  }
  return message;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
var responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function processStream(response) {
  const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
  const responseStream = getResponseStream(inputStream);
  const [stream1, stream2] = responseStream.tee();
  return {
    stream: generateResponseSequence(stream1),
    response: getResponsePromise(stream2)
  };
}
async function getResponsePromise(stream) {
  const allResponses = [];
  const reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      return addHelpers(aggregateResponses(allResponses));
    }
    allResponses.push(value);
  }
}
function generateResponseSequence(stream) {
  return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {
    const reader = stream.getReader();
    while (true) {
      const { value, done } = yield __await(reader.read());
      if (done) {
        break;
      }
      yield yield __await(addHelpers(value));
    }
  });
}
function getResponseStream(inputStream) {
  const reader = inputStream.getReader();
  const stream = new ReadableStream({
    start(controller) {
      let currentText = "";
      return pump();
      function pump() {
        return reader.read().then(({ value, done }) => {
          if (done) {
            if (currentText.trim()) {
              controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
              return;
            }
            controller.close();
            return;
          }
          currentText += value;
          let match = currentText.match(responseLineRE);
          let parsedResponse;
          while (match) {
            try {
              parsedResponse = JSON.parse(match[1]);
            } catch (e) {
              controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
              return;
            }
            controller.enqueue(parsedResponse);
            currentText = currentText.substring(match[0].length);
            match = currentText.match(responseLineRE);
          }
          return pump();
        });
      }
    }
  });
  return stream;
}
function aggregateResponses(responses) {
  const lastResponse = responses[responses.length - 1];
  const aggregatedResponse = {
    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
  };
  for (const response of responses) {
    if (response.candidates) {
      for (const candidate of response.candidates) {
        const i = candidate.index;
        if (!aggregatedResponse.candidates) {
          aggregatedResponse.candidates = [];
        }
        if (!aggregatedResponse.candidates[i]) {
          aggregatedResponse.candidates[i] = {
            index: candidate.index
          };
        }
        aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;
        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;
        aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;
        aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;
        if (candidate.content && candidate.content.parts) {
          if (!aggregatedResponse.candidates[i].content) {
            aggregatedResponse.candidates[i].content = {
              role: candidate.content.role || "user",
              parts: [{ text: "" }]
            };
          }
          for (const part of candidate.content.parts) {
            if (part.text) {
              aggregatedResponse.candidates[i].content.parts[0].text += part.text;
            }
          }
        }
      }
    }
  }
  return aggregatedResponse;
}
async function generateContentStream(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.STREAM_GENERATE_CONTENT,
    apiKey,
    /* stream */
    true
  );
  const response = await makeRequest(url, JSON.stringify(params));
  return processStream(response);
}
async function generateContent(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.GENERATE_CONTENT,
    apiKey,
    /* stream */
    false
  );
  const response = await makeRequest(url, JSON.stringify(params));
  const responseJson = await response.json();
  const enhancedResponse = addHelpers(responseJson);
  return {
    response: enhancedResponse
  };
}
function formatNewContent(request, role) {
  let newParts = [];
  if (typeof request === "string") {
    newParts = [{ text: request }];
  } else {
    for (const partOrString of request) {
      if (typeof partOrString === "string") {
        newParts.push({ text: partOrString });
      } else {
        newParts.push(partOrString);
      }
    }
  }
  return { role, parts: newParts };
}
function formatGenerateContentInput(params) {
  if (params.contents) {
    return params;
  } else {
    const content = formatNewContent(params, "user");
    return { contents: [content] };
  }
}
function formatEmbedContentInput(params) {
  if (typeof params === "string" || Array.isArray(params)) {
    const content = formatNewContent(params, "user");
    return { content };
  }
  return params;
}
var SILENT_ERROR = "SILENT_ERROR";
var ChatSession = class {
  constructor(apiKey, model, params) {
    this.model = model;
    this.params = params;
    this._history = [];
    this._sendPromise = Promise.resolve();
    this._apiKey = apiKey;
    if (params === null || params === void 0 ? void 0 : params.history) {
      this._history = params.history.map((content) => {
        if (!content.role) {
          throw new Error("Missing role for history item: " + JSON.stringify(content));
        }
        return formatNewContent(content.parts, content.role);
      });
    }
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    await this._sendPromise;
    return this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(request) {
    var _a, _b;
    await this._sendPromise;
    const newContent = formatNewContent(request, "user");
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      contents: [...this._history, newContent]
    };
    let finalResult;
    this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest)).then((result) => {
      var _a2;
      if (result.response.candidates && result.response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (_a2 = result.response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0].content);
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(result.response);
        if (blockErrorMessage) {
          console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
      finalResult = result;
    });
    await this._sendPromise;
    return finalResult;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(request) {
    var _a, _b;
    await this._sendPromise;
    const newContent = formatNewContent(request, "user");
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      contents: [...this._history, newContent]
    };
    const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest);
    this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
      throw new Error(SILENT_ERROR);
    }).then((streamResult) => streamResult.response).then((response) => {
      if (response.candidates && response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({}, response.candidates[0].content);
        if (!responseContent.role) {
          responseContent.role = "model";
        }
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(response);
        if (blockErrorMessage) {
          console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
    }).catch((e) => {
      if (e.message !== SILENT_ERROR) {
        console.error(e);
      }
    });
    return streamPromise;
  }
};
async function countTokens(apiKey, model, params) {
  const url = new RequestUrl(model, Task.COUNT_TOKENS, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(Object.assign(Object.assign({}, params), { model })));
  return response.json();
}
async function embedContent(apiKey, model, params) {
  const url = new RequestUrl(model, Task.EMBED_CONTENT, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(params));
  return response.json();
}
async function batchEmbedContents(apiKey, model, params) {
  const url = new RequestUrl(model, Task.BATCH_EMBED_CONTENTS, apiKey, false);
  const requestsWithModel = params.requests.map((request) => {
    return Object.assign(Object.assign({}, request), { model: `models/${model}` });
  });
  const response = await makeRequest(url, JSON.stringify({ requests: requestsWithModel }));
  return response.json();
}
var GenerativeModel = class {
  constructor(apiKey, modelParams) {
    var _a;
    this.apiKey = apiKey;
    if (modelParams.model.startsWith("models/")) {
      this.model = (_a = modelParams.model.split("models/")) === null || _a === void 0 ? void 0 : _a[1];
    } else {
      this.model = modelParams.model;
    }
    this.generationConfig = modelParams.generationConfig || {};
    this.safetySettings = modelParams.safetySettings || [];
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(startChatParams) {
    return new ChatSession(this.apiKey, this.model, startChatParams);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(request) {
    const formattedParams = formatGenerateContentInput(request);
    return countTokens(this.apiKey, this.model, formattedParams);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(request) {
    const formattedParams = formatEmbedContentInput(request);
    return embedContent(this.apiKey, this.model, formattedParams);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(batchEmbedContentRequest) {
    return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest);
  }
};
var GoogleGenerativeAI = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(modelParams) {
    if (!modelParams.model) {
      throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
    }
    return new GenerativeModel(this.apiKey, modelParams);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  googleApiKey: "",
  searchEngineId: "",
  geminiApiKey: "",
  topics: ["Technology", "World News"],
  scheduleTime: "08:00",
  archiveFolder: "News Archive",
  news_number: 10,
  // Reduced to stay within API limits
  templatePath: "",
  maxRetries: 3,
  enableNotifications: true,
  sortByDate: true,
  includeMetadata: true,
  maxRetryDelay: 3e4,
  outputFormat: "detailed",
  removeAds: true,
  maxNewsPerTopic: 10,
  highlightKeywords: true,
  commonAdPatterns: [
    "Subscribe to read",
    "Sign up now",
    "Advertisement",
    "Click here to",
    "Special offer",
    "newsletters?\\b",
    "\\[\\d+\\]",
    "\xA9\\s*\\d{4}",
    "cookie",
    "subscribe",
    "sign up",
    "for more information",
    "privacy policy",
    "terms of service",
    "all rights reserved"
  ],
  minSnippetLength: 100,
  excludedDomains: [],
  preferredDomains: [],
  searchDateRange: "d2",
  contentRelevanceScore: 6,
  enableSourceRanking: true,
  searchExactPhrases: [],
  searchExcludeTerms: [],
  useAdvancedFiltering: true,
  conserveApiCalls: true,
  // Default to conserving API calls
  apiCallsPerDay: 100,
  // Default limit
  useEnhancedSearchQueries: true
  // Default to using enhanced queries
};
var QUALITY_NEWS_SOURCES = [
  "nytimes.com",
  "bbc.com",
  "reuters.com",
  "apnews.com",
  "economist.com",
  "wsj.com",
  "ft.com",
  "bloomberg.com",
  "theguardian.com",
  "npr.org",
  "washingtonpost.com",
  "aljazeera.com",
  "nature.com",
  "time.com",
  "wired.com",
  "theatlantic.com",
  "newyorker.com",
  "scientificamerican.com",
  "cnbc.com",
  "fortune.com",
  "techcrunch.com",
  "thenextweb.com",
  "arstechnica.com"
];
var DailyNewsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Daily News Settings" });
    if (this.plugin.settings.conserveApiCalls) {
      const apiInfo = containerEl.createEl("div", {
        cls: "api-usage-info"
      });
      apiInfo.createEl("p", {
        text: `API Usage Today: ${this.plugin.apiCallsToday}/${this.plugin.settings.apiCallsPerDay} calls`
      });
    }
    const apiSection = containerEl.createEl("div");
    apiSection.createEl("h3", { text: "API Configuration" });
    new import_obsidian.Setting(apiSection).setName("Google API Key").setDesc("Your Google Custom Search API key").addText((text) => text.setPlaceholder("Enter API key").setValue(this.plugin.settings.googleApiKey).onChange(async (value) => {
      this.plugin.settings.googleApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(apiSection).setName("Search Engine ID").setDesc("Your Google Custom Search Engine ID").addText((text) => text.setPlaceholder("Enter Search Engine ID").setValue(this.plugin.settings.searchEngineId).onChange(async (value) => {
      this.plugin.settings.searchEngineId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(apiSection).setName("Gemini API Key").setDesc("Your Google Gemini API key").addText((text) => text.setPlaceholder("Enter Gemini API key").setValue(this.plugin.settings.geminiApiKey).onChange(async (value) => {
      this.plugin.settings.geminiApiKey = value;
      await this.plugin.saveSettings();
    }));
    const newsSection = containerEl.createEl("div");
    newsSection.createEl("h3", { text: "Basic News Preferences" });
    new import_obsidian.Setting(newsSection).setName("Schedule Time").setDesc("When to generate daily news (24-hour format)").addText((text) => text.setPlaceholder("HH:MM").setValue(this.plugin.settings.scheduleTime).onChange(async (value) => {
      this.plugin.settings.scheduleTime = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(newsSection).setName("Archive Folder").setDesc("Folder to store daily news notes").addText((text) => text.setPlaceholder("News Archive").setValue(this.plugin.settings.archiveFolder).onChange(async (value) => {
      this.plugin.settings.archiveFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(newsSection).setName("Topics").setDesc("News topics to follow (comma-separated)").addText((text) => text.setPlaceholder("Technology, World News").setValue(this.plugin.settings.topics.join(", ")).onChange(async (value) => {
      this.plugin.settings.topics = value.split(",").map((t) => t.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(newsSection).setName("Template File").setDesc("Custom template file path (optional)").addText((text) => text.setPlaceholder("templates/news-template.md").setValue(this.plugin.settings.templatePath).onChange(async (value) => {
      this.plugin.settings.templatePath = value;
      await this.plugin.saveSettings();
    }));
    const apiUsageSection = containerEl.createEl("div");
    apiUsageSection.createEl("h3", { text: "API Usage Management" });
    new import_obsidian.Setting(apiUsageSection).setName("Conserve API Calls").setDesc("Enable to limit API calls and prevent quota exhaustion").addToggle((toggle) => toggle.setValue(this.plugin.settings.conserveApiCalls).onChange(async (value) => {
      this.plugin.settings.conserveApiCalls = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.conserveApiCalls) {
      new import_obsidian.Setting(apiUsageSection).setName("Daily API Call Limit").setDesc("Maximum number of API calls to make per day").addText((text) => text.setPlaceholder("100").setValue(this.plugin.settings.apiCallsPerDay.toString()).onChange(async (value) => {
        const parsedValue = parseInt(value);
        this.plugin.settings.apiCallsPerDay = isNaN(parsedValue) ? 100 : parsedValue;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(apiUsageSection).setName("Reset API Counter").setDesc("Reset today's API call counter").addButton((button) => button.setButtonText("Reset Counter").onClick(async () => {
        this.plugin.apiCallsToday = 0;
        this.plugin.updateStatusBar();
        this.display();
        new import_obsidian.Notice("API call counter reset to 0");
      }));
    }
    const searchQualitySection = containerEl.createEl("div");
    searchQualitySection.createEl("h3", { text: "Search Quality" });
    new import_obsidian.Setting(searchQualitySection).setName("Use Enhanced Search Queries").setDesc("Use topic-specific optimized search queries to find better news articles").addToggle((toggle) => toggle.setValue(this.plugin.settings.useEnhancedSearchQueries).onChange(async (value) => {
      this.plugin.settings.useEnhancedSearchQueries = value;
      await this.plugin.saveSettings();
    }));
    const searchSection = containerEl.createEl("div");
    searchSection.createEl("h3", { text: "Advanced Search Settings" });
    new import_obsidian.Setting(searchSection).setName("Search Date Range").setDesc("How far back to search (d1 = 1 day, d2 = 2 days, w1 = 1 week)").addText((text) => text.setPlaceholder("d2").setValue(this.plugin.settings.searchDateRange).onChange(async (value) => {
      this.plugin.settings.searchDateRange = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("News Results Per Topic").setDesc("Maximum number of news results to retrieve per topic (via pagination)").addText((text) => text.setPlaceholder("20").setValue(this.plugin.settings.news_number.toString()).onChange(async (value) => {
      const parsedValue = parseInt(value);
      this.plugin.settings.news_number = isNaN(parsedValue) ? 20 : parsedValue;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Max News Items Per Summary").setDesc("Maximum number of news items to include in the summary").addText((text) => text.setPlaceholder("8").setValue(this.plugin.settings.maxNewsPerTopic.toString()).onChange(async (value) => {
      const parsedValue = parseInt(value);
      this.plugin.settings.maxNewsPerTopic = isNaN(parsedValue) ? 10 : parsedValue;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Minimum Content Length").setDesc("Minimum length for news snippets to be considered").addText((text) => text.setPlaceholder("100").setValue(this.plugin.settings.minSnippetLength.toString()).onChange(async (value) => {
      const parsedValue = parseInt(value);
      this.plugin.settings.minSnippetLength = isNaN(parsedValue) ? 100 : parsedValue;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Preferred Domains").setDesc("Comma-separated list of preferred domains (e.g., nytimes.com, bbc.com)").addText((text) => text.setPlaceholder("nytimes.com, bbc.com").setValue(this.plugin.settings.preferredDomains.join(", ")).onChange(async (value) => {
      this.plugin.settings.preferredDomains = value.split(",").map((d) => d.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Excluded Domains").setDesc("Comma-separated list of domains to exclude").addText((text) => text.setPlaceholder("pinterest.com, facebook.com").setValue(this.plugin.settings.excludedDomains.join(", ")).onChange(async (value) => {
      this.plugin.settings.excludedDomains = value.split(",").map((d) => d.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Exact Phrases to Include").setDesc("Comma-separated list of exact phrases to include in search").addText((text) => text.setPlaceholder("latest developments, new research").setValue(this.plugin.settings.searchExactPhrases.join(", ")).onChange(async (value) => {
      this.plugin.settings.searchExactPhrases = value.split(",").map((p) => p.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(searchSection).setName("Terms to Exclude").setDesc("Comma-separated list of terms to exclude from search").addText((text) => text.setPlaceholder("clickbait, rumor, opinion").setValue(this.plugin.settings.searchExcludeTerms.join(", ")).onChange(async (value) => {
      this.plugin.settings.searchExcludeTerms = value.split(",").map((t) => t.trim());
      await this.plugin.saveSettings();
    }));
    const qualitySection = containerEl.createEl("div");
    qualitySection.createEl("h3", { text: "Content Quality Settings" });
    new import_obsidian.Setting(qualitySection).setName("Enable Advanced Filtering").setDesc("Apply advanced filtering to improve news quality").addToggle((toggle) => toggle.setValue(this.plugin.settings.useAdvancedFiltering).onChange(async (value) => {
      this.plugin.settings.useAdvancedFiltering = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(qualitySection).setName("Enable Source Ranking").setDesc("Prioritize high-quality news sources").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableSourceRanking).onChange(async (value) => {
      this.plugin.settings.enableSourceRanking = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(qualitySection).setName("Minimum Relevance Score").setDesc("Minimum relevance score for news (1-10)").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.contentRelevanceScore).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.contentRelevanceScore = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(qualitySection).setName("Remove Ads and Promotions").setDesc("Clean promotional content from news").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeAds).onChange(async (value) => {
      this.plugin.settings.removeAds = value;
      await this.plugin.saveSettings();
    }));
    const formatSection = containerEl.createEl("div");
    formatSection.createEl("h3", { text: "Output Format" });
    new import_obsidian.Setting(formatSection).setName("Output Style").setDesc("Choose between detailed or concise news format").addDropdown((dropdown) => dropdown.addOption("detailed", "Detailed").addOption("concise", "Concise").setValue(this.plugin.settings.outputFormat).onChange(async (value) => {
      this.plugin.settings.outputFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(formatSection).setName("Highlight Keywords").setDesc("Highlight important terms in the summary").addToggle((toggle) => toggle.setValue(this.plugin.settings.highlightKeywords).onChange(async (value) => {
      this.plugin.settings.highlightKeywords = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(formatSection).setName("Sort News by Date").setDesc("Sort news items by published date").addToggle((toggle) => toggle.setValue(this.plugin.settings.sortByDate).onChange(async (value) => {
      this.plugin.settings.sortByDate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(formatSection).setName("Include Metadata").setDesc("Include metadata in the generated news").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeMetadata).onChange(async (value) => {
      this.plugin.settings.includeMetadata = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(formatSection).setName("Enable Notifications").setDesc("Show notifications when news is generated").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableNotifications).onChange(async (value) => {
      this.plugin.settings.enableNotifications = value;
      await this.plugin.saveSettings();
    }));
  }
};
var DailyNewsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = null;
    this.apiCallsToday = 0;
    this.lastApiCallDate = "";
  }
  async onunload() {
    console.log("Unloading Daily News Plugin");
    if (this.statusBarItem) {
      this.statusBarItem.remove();
    }
  }
  async onload() {
    await this.loadSettings();
    this.loadApiCallCount();
    this.addSettingTab(new DailyNewsSettingTab(this.app, this));
    this.registerInterval(
      window.setInterval(() => this.checkAndGenerateNews(), 6e4)
    );
    this.addCommand({
      id: "generate-news-now",
      name: "Generate News Now",
      callback: async () => {
        new import_obsidian.Notice("Generating news...");
        await this.generateDailyNews();
      }
    });
    this.statusBarItem = this.addStatusBarItem();
    this.updateStatusBar();
  }
  // API call tracking methods
  loadApiCallCount() {
    const today = new Date().toISOString().split("T")[0];
    if (this.lastApiCallDate !== today) {
      this.apiCallsToday = 0;
      this.lastApiCallDate = today;
    }
  }
  incrementApiCallCount() {
    const today = new Date().toISOString().split("T")[0];
    if (this.lastApiCallDate !== today) {
      this.apiCallsToday = 0;
      this.lastApiCallDate = today;
    }
    this.apiCallsToday++;
    this.updateStatusBar();
  }
  // Changed to public so it can be accessed from DailyNewsSettingTab
  updateStatusBar() {
    if (this.statusBarItem) {
      const apiStatus = this.settings.conserveApiCalls ? ` | API: ${this.apiCallsToday}/${this.settings.apiCallsPerDay}` : "";
      this.statusBarItem.setText(`\u{1F4F0} Daily News Ready${apiStatus}`);
    }
  }
  canMakeApiCall() {
    if (!this.settings.conserveApiCalls) {
      return true;
    }
    return this.apiCallsToday < this.settings.apiCallsPerDay;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async fetchNews(topic) {
    if (!this.canMakeApiCall()) {
      console.log("API call limit reached for today. Skipping search for:", topic);
      new import_obsidian.Notice(`API call limit reached (${this.settings.apiCallsPerDay}/day). Try again tomorrow.`);
      return [];
    }
    let searchQuery = "";
    if (this.settings.useEnhancedSearchQueries) {
      switch (topic.toLowerCase()) {
        case "technology":
          searchQuery = `${topic} news "latest developments" OR "new research" OR "breakthrough" OR "innovation" OR "launch" -old -outdated`;
          break;
        case "world news":
          searchQuery = `${topic} "international relations" OR "global affairs" OR "foreign policy" OR "diplomatic" OR "geopolitical" -speculation -rumor`;
          break;
        case "business":
          searchQuery = `${topic} news "financial results" OR "market trends" OR "earnings" OR "economic data" OR "merger" -speculative`;
          break;
        case "science":
          searchQuery = `${topic} news "discovery" OR "research findings" OR "study results" OR "scientific breakthrough" -preliminary -unconfirmed`;
          break;
        case "health":
          searchQuery = `${topic} news "medical research" OR "health study" OR "clinical trial" OR "treatment breakthrough" -unverified`;
          break;
        default:
          searchQuery = `${topic} news "latest developments" OR "recent events" OR "significant developments" OR "important update"`;
      }
    } else {
      searchQuery = `${topic} news`;
    }
    if (this.settings.searchExactPhrases && this.settings.searchExactPhrases.length > 0) {
      for (const phrase of this.settings.searchExactPhrases) {
        if (phrase.trim()) {
          searchQuery += ` "${phrase.trim()}"`;
        }
      }
    }
    if (this.settings.searchExcludeTerms && this.settings.searchExcludeTerms.length > 0) {
      for (const term of this.settings.searchExcludeTerms) {
        if (term.trim()) {
          searchQuery += ` -${term.trim()}`;
        }
      }
    }
    console.log(`Using search query for ${topic}: ${searchQuery}`);
    const dateRangeParam = this.getOptimizedDateRange();
    const maxResultsPerRequest = 10;
    const totalResultsToFetch = Math.min(100, this.settings.news_number);
    const numRequests = Math.ceil(totalResultsToFetch / maxResultsPerRequest);
    let allNewsItems = [];
    if (this.settings.preferredDomains && this.settings.preferredDomains.length > 0) {
      const highQualityNewsItems = await this.makeSearchRequest(
        searchQuery,
        1,
        dateRangeParam,
        true,
        // prioritize preferred domains
        maxResultsPerRequest
      );
      if (highQualityNewsItems && highQualityNewsItems.length > 0) {
        allNewsItems = [...highQualityNewsItems];
      }
    }
    if (allNewsItems.length < totalResultsToFetch) {
      for (let i = 0; i < numRequests; i++) {
        if (!this.canMakeApiCall()) {
          break;
        }
        const startIndex = i * maxResultsPerRequest + 1;
        const newItems = await this.makeSearchRequest(
          searchQuery,
          startIndex,
          dateRangeParam,
          false,
          maxResultsPerRequest
        );
        if (!newItems || !Array.isArray(newItems)) {
          break;
        }
        for (const item of newItems) {
          if (!allNewsItems.some((existingItem) => existingItem.link === item.link)) {
            allNewsItems.push(item);
          }
        }
        if (allNewsItems.length >= totalResultsToFetch) {
          break;
        }
        if (i < numRequests - 1) {
          await new Promise((resolve) => setTimeout(resolve, 1e3));
        }
      }
    }
    let newsItems = allNewsItems.map((item) => {
      var _a, _b, _c, _d, _e, _f;
      const url = new URL(item.link);
      const domain = url.hostname.replace("www.", "");
      const source = ((_c = (_b = (_a = item.pagemap) == null ? void 0 : _a.metatags) == null ? void 0 : _b[0]) == null ? void 0 : _c.og_site_name) || domain;
      return {
        title: item.title,
        link: item.link,
        snippet: item.snippet,
        publishedTime: (_f = (_e = (_d = item.pagemap) == null ? void 0 : _d.metatags) == null ? void 0 : _e[0]) == null ? void 0 : _f.publishedTime,
        source,
        relevanceScore: this.calculateRelevanceScore(item, topic)
      };
    });
    if (this.settings.useAdvancedFiltering) {
      newsItems = this.applyAdvancedFiltering(newsItems);
    }
    if (newsItems.length === 0 && this.canMakeApiCall()) {
      const broaderQuery = `${topic} news latest`;
      const broaderItems = await this.makeSearchRequest(
        broaderQuery,
        1,
        "w1",
        // Expand to a week to get more results
        false,
        maxResultsPerRequest
      );
      if (broaderItems && broaderItems.length > 0) {
        newsItems = broaderItems.map((item) => {
          var _a, _b, _c, _d, _e, _f;
          const url = new URL(item.link);
          const domain = url.hostname.replace("www.", "");
          const source = ((_c = (_b = (_a = item.pagemap) == null ? void 0 : _a.metatags) == null ? void 0 : _b[0]) == null ? void 0 : _c.og_site_name) || domain;
          return {
            title: item.title,
            link: item.link,
            snippet: item.snippet,
            publishedTime: (_f = (_e = (_d = item.pagemap) == null ? void 0 : _d.metatags) == null ? void 0 : _e[0]) == null ? void 0 : _f.publishedTime,
            source,
            relevanceScore: this.calculateRelevanceScore(item, topic) * 0.8
            // Reduce score slightly for broader results
          };
        });
        newsItems = newsItems.filter((item) => {
          return (item.relevanceScore || 0) >= Math.max(3, this.settings.contentRelevanceScore - 2);
        });
      }
    }
    if (this.settings.enableSourceRanking) {
      newsItems.sort(
        (a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0)
      );
    } else if (this.settings.sortByDate) {
      newsItems.sort((a, b) => {
        if (!a.publishedTime)
          return 1;
        if (!b.publishedTime)
          return -1;
        return new Date(b.publishedTime).getTime() - new Date(a.publishedTime).getTime();
      });
    }
    return newsItems;
  }
  // Helper methods for news fetching
  async makeSearchRequest(query, startIndex, dateRestrict, prioritizePreferredDomains, numResults) {
    const params = new URLSearchParams({
      key: this.settings.googleApiKey,
      cx: this.settings.searchEngineId,
      q: query,
      num: numResults.toString(),
      dateRestrict,
      fields: "items(title,link,snippet,pagemap/metatags/publishedTime,pagemap/metatags/og_site_name)",
      sort: "date",
      start: startIndex.toString()
    });
    if (prioritizePreferredDomains && this.settings.preferredDomains && this.settings.preferredDomains.length > 0) {
      const sitesQuery = this.settings.preferredDomains.map((domain) => `site:${domain}`).join(" OR ");
      params.set("q", `${params.get("q")} (${sitesQuery})`);
    }
    this.incrementApiCallCount();
    const response = await this.retryOperation(async () => {
      const res = await fetch(
        `https://www.googleapis.com/customsearch/v1?${params.toString()}`
      );
      if (!res.ok) {
        try {
          const errorData = await res.json();
          console.error("API Error Details:", errorData);
          throw new Error(`HTTP error! status: ${res.status}, details: ${JSON.stringify(errorData)}`);
        } catch (parseError) {
          throw new Error(`HTTP error! status: ${res.status}, couldn't parse error details`);
        }
      }
      return res;
    });
    const data = await response.json();
    if (!data || !data.items || data.items.length === 0) {
      return [];
    }
    return data.items;
  }
  getOptimizedDateRange() {
    let dateRange = this.settings.searchDateRange;
    if (!dateRange.match(/^[dw]\d+$/)) {
      dateRange = "d2";
    }
    return dateRange;
  }
  // Enhanced relevance scoring
  calculateRelevanceScore(item, topic) {
    let score = 5;
    const url = new URL(item.link);
    const domain = url.hostname.replace("www.", "");
    if (QUALITY_NEWS_SOURCES.some((source) => domain.includes(source))) {
      score += 3;
    }
    if (/\/article\/|\/story\/|\/news\/|\/\d{4}\/\d{2}\/|[-]\d+\.html$/.test(item.link)) {
      score += 2;
    }
    if (url.pathname.length > 1 && url.pathname !== "/" && !url.pathname.endsWith("/")) {
      score += 1;
    }
    if (url.pathname === "/" || url.pathname === "" || url.pathname.length < 3) {
      score -= 4;
    }
    if (/\/category\/|\/categories\/|\/topics\/|\/sections\/|\/tag\/|\/tags\//.test(item.link)) {
      score -= 3;
    }
    if (item.snippet && item.snippet.length > 200) {
      score += 1;
    }
    if (item.title && item.title.toLowerCase().includes(topic.toLowerCase())) {
      score += 1;
    }
    if (item.snippet) {
      if (/\d+%|\d+ percent|\$\d+|\d+ million|\d+ billion/.test(item.snippet)) {
        score += 2;
      }
      if (/January|February|March|April|May|June|July|August|September|October|November|December \d{1,2}(st|nd|rd|th)?/.test(item.snippet)) {
        score += 1.5;
      }
      if (/"[^"]{10,}"/.test(item.snippet) || /'[^']{10,}'/.test(item.snippet)) {
        score += 1.5;
      }
      if (/reported|announced|revealed|published|released|stated|confirmed|said|according to/i.test(item.snippet)) {
        score += 1;
      }
      if (/provides news|latest news|breaking news|news and information|coverage of|news from|headlines from/i.test(item.snippet) && item.snippet.length < 120) {
        score -= 3;
      }
      if (/is a website|is the official|is an online|website of|homepage of|official site/i.test(item.snippet)) {
        score -= 4;
      }
    }
    if (item.title) {
      if (/you won't believe|shocking|amazing|mind-blowing|incredible|top \d+ ways/i.test(item.title)) {
        score -= 2;
      }
      if (/official website|homepage|welcome to/i.test(item.title)) {
        score -= 3;
      }
    }
    if (!item.snippet || item.snippet.length < this.settings.minSnippetLength) {
      score -= 3;
    }
    if (this.settings.preferredDomains && this.settings.preferredDomains.some((preferredDomain) => domain.includes(preferredDomain))) {
      score += 2;
    }
    if (this.settings.excludedDomains && this.settings.excludedDomains.some((excludedDomain) => domain.includes(excludedDomain))) {
      score -= 4;
    }
    return Math.max(1, Math.min(10, score));
  }
  // Enhanced filtering
  applyAdvancedFiltering(newsItems) {
    return newsItems.filter((item) => {
      const url = new URL(item.link);
      const domain = url.hostname.replace("www.", "");
      if (this.settings.excludedDomains && this.settings.excludedDomains.length > 0) {
        if (this.settings.excludedDomains.some((excluded) => domain.includes(excluded))) {
          return false;
        }
      }
      if (!item.snippet || item.snippet.length < this.settings.minSnippetLength) {
        return false;
      }
      if ((item.relevanceScore || 0) < this.settings.contentRelevanceScore) {
        return false;
      }
      if (item.title && /top \d+|best \d+|\d+ ways|\d+ things|best of|roundup/i.test(item.title)) {
        return false;
      }
      if (url.pathname === "/" || url.pathname === "" || url.pathname.length < 3) {
        return false;
      }
      if (/\/category\/|\/categories\/|\/topics\/|\/sections\/|\/tag\/|\/tags\//.test(item.link)) {
        return false;
      }
      if (item.snippet && /is a website|is the official|is an online|official site of|homepage of/i.test(item.snippet)) {
        return false;
      }
      return true;
    });
  }
  cleanNewsContent(text) {
    if (!this.settings.removeAds)
      return text;
    let cleaned = text;
    this.settings.commonAdPatterns.forEach((pattern) => {
      cleaned = cleaned.replace(new RegExp(pattern, "gi"), "");
    });
    cleaned = cleaned.replace(/https?:\/\/\S+/g, "");
    cleaned = cleaned.replace(/\S+@\S+\.\S+/g, "");
    const fillerPhrases = [
      "click here",
      "read more",
      "learn more",
      "find out more",
      "sign up",
      "subscribe",
      "follow us",
      "share this",
      "according to reports",
      "sources say"
    ];
    fillerPhrases.forEach((phrase) => {
      cleaned = cleaned.replace(new RegExp(phrase, "gi"), "");
    });
    cleaned = cleaned.replace(/\s+/g, " ").trim();
    cleaned = cleaned.replace(/(\n\s*){3,}/g, "\n\n");
    return cleaned;
  }
  // Fallback method for low-quality content
  getFallbackSummary(topic, newsItems) {
    const sampleUrls = newsItems.slice(0, 3).map((item) => {
      const domain = new URL(item.link).hostname.replace("www.", "");
      return `${domain} (${item.title ? item.title.substring(0, 30) + "..." : "No title"})`;
    }).join(", ");
    return `### No Substantial News Content Found

Unfortunately, the search didn't find substantive news articles for "${topic}" today. 

**What was found instead:**
- Generic website listings or landing pages
- Sites that describe themselves rather than providing specific news
- Content that lacks concrete details, quotes, or developments
${sampleUrls ? `- Sample sites checked: ${sampleUrls}` : ""}

**Recommendations to improve results:**
- Try again later when more recent news may be available
- Add specific keywords to your "${topic}" topic, like "${topic} breakthrough" or "${topic} latest research"
- Add high-quality news sources to your Preferred Domains settings
- Adjust the Search Date Range to look back further (e.g., "w1" for one week)

This plugin works best with specific, substantive news rather than general website directories or landing pages.
`;
  }
  // Enhanced prompts for AI summary generation
  getDetailedPrompt(newsText) {
    return `You are a professional news analyst creating a high-quality news briefing. Analyze and summarize these news articles:

${newsText}

CRITICAL GUIDELINES - READ CAREFULLY:
1. Focus ONLY on substantive news with concrete developments
2. Completely IGNORE any generic website listings, simple link compilations, or shallow content
3. EXCLUDE any content that merely mentions a website without actual news (e.g., "News from Site X")
4. NEVER include entries like "RIT highlights news from Rochester Institute of Technology" or "CNET provides product reviews"
5. PRIORITIZE news with specific data, quotes, figures, and developments
6. AVOID vague summaries and instead focus on specific facts and details
7. ANALYZE the implications and context of each significant story
8. INCLUDE only ONE verified, significant news item per bullet point
9. For each news item, include the SOURCE NAME and link in markdown format: [Source Name](URL)
10. Use exact dates rather than relative time references
11. Make each bullet point specific, concrete and informative - avoid generic placeholders
12. Exclude ANY item that only describes what a website does rather than actual news content

IMPORTANT: If the provided articles lack substantive content or are mostly website landing pages, DO NOT create placeholder entries.

WHEN CONTENT IS LIMITED:
1. If ANY substantive article exists with real news, focus entirely on that, even if it's just one item.
2. If only one topic has quality news, it's better to provide in-depth coverage of that topic than to force content for all topics.
3. Look for concrete facts, dates, statistics, and direct quotes - these indicate genuine news rather than website descriptions.

EXAMPLES OF BAD CONTENT TO EXCLUDE:
- "University News: [RIT](https://www.rit.edu/news) highlights news from Rochester Institute of Technology (RIT)."
- "Product Reviews & Tech Coverage: [CNET](https://www.cnet.com/) provides product reviews, tech news, and daily deals."
- "Breaking News: [CNN](https://www.cnn.com/) covers the latest news and headlines."
- "Daily Updates: [BBC](https://www.bbc.com/) delivers international news coverage."

EXAMPLES OF GOOD CONTENT TO INCLUDE:
- "**Quantum Computing Breakthrough**: Researchers at MIT demonstrated a 128-qubit quantum processor achieving quantum advantage in simulating complex molecules on February 25, 2025. [Nature](https://www.nature.com/articles/s41586-025-05742-z)"
- "**Global Trade Impact**: The EU-China trade deficit widened to \u20AC291 billion in 2024, a 24% increase from 2023, according to data released yesterday. [Financial Times](https://www.ft.com/content/3a7b5e9c)"

### Key Developments
[For each significant story - ONLY include items with actual news, NOT descriptions of websites]
- **Title with specific detail**: Concrete fact or development. Include exact figures, data points, and expert quotes when available. [Source](URL)

### Analysis & Context
[Provide context, implications, or background for the most significant story]

### Notable Quotes or Data
[Include a specific quote, statistic, or data point from the news, if available]
`;
  }
  getConcisePrompt(newsText) {
    return `You are a professional news editor creating a concise, high-quality news briefing. Analyze and summarize these news articles:

${newsText}

CRITICAL GUIDELINES - READ CAREFULLY:
1. Focus ONLY on substantive news with concrete developments
2. Completely IGNORE any generic website listings, simple link compilations, or shallow content
3. EXCLUDE any content that merely mentions a website without actual news (e.g., "News from Site X")
4. NEVER include entries like "RIT highlights news from Rochester Institute of Technology" or "CNET provides product reviews"
5. PRIORITIZE news with specific data, quotes, figures, and developments
6. AVOID vague summaries and instead focus on specific facts and details
7. For each news item, include the SOURCE NAME and link in markdown format: [Source Name](URL)
8. Use exact dates rather than relative time references
9. Make each bullet point specific, concrete and informative - avoid generic placeholders
10. Exclude ANY item that only describes what a website does rather than actual news content

IMPORTANT: If the provided articles lack substantive content or are mostly website landing pages, DO NOT create placeholder entries.

WHEN CONTENT IS LIMITED:
1. If ANY substantive article exists with real news, focus entirely on that, even if it's just one item.
2. It's better to provide one genuine news item than multiple generic placeholders.
3. For articles that look like landing pages (no real news content), completely exclude them.

EXAMPLES OF BAD CONTENT TO EXCLUDE:
- "University News: [RIT](https://www.rit.edu/news) highlights news from Rochester Institute of Technology (RIT)."
- "Product Reviews & Tech Coverage: [CNET](https://www.cnet.com/) provides product reviews, tech news, and daily deals."
- "Breaking News: [CNN](https://www.cnn.com/) covers the latest news and headlines."
- "Daily Updates: [BBC](https://www.bbc.com/) delivers international news coverage."

EXAMPLES OF GOOD CONTENT TO INCLUDE:
- "**Apple's AI Integration**: Apple announced integration of GPT-4o across iOS 19 starting next month, impacting 850M devices worldwide. [TechCrunch](https://techcrunch.com/article/apple-gpt4)"
- "**Climate Policy Shift**: The EU Parliament voted 402-157 to increase carbon reduction targets to 65% by 2035, up from the previous 55% goal. [Reuters](https://www.reuters.com/article/eu-climate-vote)"

### Key Updates
- **Specific Development 1**: Concrete details with data points [Source](URL)
- **Specific Development 2**: Concrete details with data points [Source](URL)
- **Specific Development 3**: Concrete details with data points [Source](URL)

### Noteworthy Quote or Data Point
[Most significant quote, metric or statistic with source and context]
`;
  }
  // Enhanced summary generation
  async generateSummary(newsItems) {
    var _a;
    if (!newsItems.length) {
      return "No recent news found for this topic.";
    }
    const processedItems = newsItems.slice(0, this.settings.maxNewsPerTopic).map((item) => ({
      ...item,
      snippet: this.cleanNewsContent(item.snippet)
    }));
    const hasQualityContent = processedItems.some(
      (item) => (item.relevanceScore || 0) >= 7 && item.snippet && item.snippet.length > 120 && !/is a website|is the official|homepage|official site/i.test(item.snippet)
    );
    if (!hasQualityContent && processedItems.length < 3) {
      const topicMatch = (_a = processedItems[0]) == null ? void 0 : _a.link.match(/[?&]q=([^&]+)/);
      const topic = topicMatch ? decodeURIComponent(topicMatch[1]).replace(/\+news.*$/, "") : "this topic";
      return this.getFallbackSummary(topic, processedItems);
    }
    const newsText = processedItems.map(
      (item) => `Title: ${item.title}
Source: ${item.source || "Unknown"}
Published: ${item.publishedTime || "Unknown"}
URL: ${item.link}
Content: ${item.snippet}
Relevance Score: ${item.relevanceScore}/10`
    ).join("\n\n");
    const promptTemplate = this.settings.outputFormat === "detailed" ? this.getDetailedPrompt(newsText) : this.getConcisePrompt(newsText);
    try {
      const genAI = new GoogleGenerativeAI(this.settings.geminiApiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      const result = await this.retryOperation(
        () => model.generateContent(promptTemplate)
      );
      let summary = result.response.text();
      if (this.settings.highlightKeywords) {
        summary = this.highlightKeywords(summary);
      }
      return summary;
    } catch (error) {
      console.error("Failed to generate summary:", error);
      return `Failed to generate summary due to an error: ${error}

Raw news data:
${newsItems.slice(0, 3).map((item) => `- ${item.title} (${item.link})`).join("\n")}`;
    }
  }
  highlightKeywords(text) {
    const keywords = {
      positive: [
        "launch",
        "grow",
        "success",
        "improve",
        "increase",
        "breakthrough",
        "advance",
        "discovery",
        "achievement",
        "progress",
        "development",
        "innovation"
      ],
      negative: [
        "decline",
        "risk",
        "fail",
        "loss",
        "crisis",
        "downturn",
        "challenge",
        "threat",
        "deficit",
        "recession",
        "setback",
        "conflict"
      ],
      neutral: [
        "announce",
        "report",
        "state",
        "plan",
        "develop",
        "analyze",
        "release",
        "study",
        "research",
        "investigate",
        "examine",
        "evaluate"
      ],
      data: [
        "percent",
        "billion",
        "million",
        "trillion",
        "increase",
        "decrease",
        "growth",
        "reduction",
        "doubled",
        "tripled",
        "halved",
        "statistics"
      ]
    };
    let highlighted = text;
    Object.entries(keywords).forEach(([type, words]) => {
      words.forEach((word) => {
        const regex = new RegExp(`\\b${word}\\w*\\b`, "gi");
        highlighted = highlighted.replace(regex, `**$&**`);
      });
    });
    highlighted = highlighted.replace(/(\$\d+[\d,.]*)|((\d+[\d,.]*%)|(\d+[\d,.]* percent))/gi, "**$&**");
    return highlighted;
  }
  async retryOperation(operation, maxRetries = this.settings.maxRetries) {
    for (let i = 0; i < maxRetries; i++) {
      try {
        return await operation();
      } catch (error) {
        if (i === maxRetries - 1) {
          console.error(`All ${maxRetries} retry attempts failed`);
          throw error;
        }
        const delay = Math.min(1e3 * Math.pow(2, i), this.settings.maxRetryDelay);
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
    throw new Error("Max retries exceeded");
  }
  async checkAndGenerateNews() {
    this.loadApiCallCount();
    const now = new Date();
    const scheduledTime = this.settings.scheduleTime.split(":");
    const targetHour = parseInt(scheduledTime[0]);
    const targetMinute = parseInt(scheduledTime[1]);
    if (now.getHours() === targetHour && now.getMinutes() === targetMinute) {
      await this.generateDailyNews();
    }
  }
  async generateDailyNews() {
    const date = new Date().toISOString().split("T")[0];
    if (this.statusBarItem) {
      this.statusBarItem.setText("\u{1F4F0} Generating News...");
    }
    try {
      let content = await this.getTemplate() || `*Generated at ${new Date().toLocaleTimeString()}*

---

`;
      if (this.settings.conserveApiCalls) {
        content += `*API Usage: ${this.apiCallsToday}/${this.settings.apiCallsPerDay} calls today*

`;
      }
      if (this.settings.outputFormat === "detailed") {
        content += `## Table of Contents

`;
        this.settings.topics.forEach((topic) => {
          content += `- [${topic}](#${topic.toLowerCase().replace(/\s+/g, "%20")})
`;
        });
        content += `
---

`;
      }
      const availableApiCalls = this.settings.apiCallsPerDay - this.apiCallsToday;
      let topicsToProcess = [...this.settings.topics];
      if (this.settings.conserveApiCalls && availableApiCalls < this.settings.topics.length) {
        topicsToProcess = topicsToProcess.slice(0, availableApiCalls);
        content += `> **Note:** Due to API limits, only processing ${topicsToProcess.length} of ${this.settings.topics.length} topics today.

`;
      }
      for (const topic of topicsToProcess) {
        content += `## ${topic}

`;
        if (!this.canMakeApiCall()) {
          content += `*API call limit reached. Skipping this topic.*

`;
          continue;
        }
        const newsItems = await this.fetchNews(topic);
        if (newsItems.length) {
          const summary = await this.generateSummary(newsItems);
          content += summary + "\n\n";
        } else {
          content += `No recent news found for ${topic}

`;
        }
      }
      if (topicsToProcess.length < this.settings.topics.length) {
        content += `## Omitted Topics

`;
        content += `The following topics were omitted due to API call limits:

`;
        const omittedTopics = this.settings.topics.filter((topic) => !topicsToProcess.includes(topic));
        omittedTopics.forEach((topic) => {
          content += `- ${topic}
`;
        });
        content += `
`;
      }
      const fileName = `${this.settings.archiveFolder}/Daily News - ${date}.md`;
      await this.app.vault.create(fileName, content);
      if (this.settings.enableNotifications) {
        new import_obsidian.Notice("Daily news generated successfully");
      }
      if (this.statusBarItem) {
        this.updateStatusBar();
      }
    } catch (error) {
      console.error("Failed to generate news:", error);
      if (this.settings.enableNotifications) {
        new import_obsidian.Notice("Failed to generate news. Check console for details.");
      }
      if (this.statusBarItem) {
        this.statusBarItem.setText("\u{1F4F0} News Error!");
      }
    }
  }
  async getTemplate() {
    if (!this.settings.templatePath)
      return null;
    try {
      const templateFile = this.app.vault.getAbstractFileByPath(this.settings.templatePath);
      if (templateFile instanceof import_obsidian.TFile) {
        return await this.app.vault.read(templateFile);
      }
    } catch (error) {
      console.error("Failed to read template:", error);
    }
    return null;
  }
};
/*! Bundled license information:

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
